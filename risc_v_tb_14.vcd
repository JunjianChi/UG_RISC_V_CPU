$date
	Fri Mar 21 22:11:10 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module risc_v_tb $end
$var wire 32 ! CPUOut [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # CPUIn [31:0] $end
$var reg 1 $ Reset $end
$scope module dut $end
$var wire 1 " CLK $end
$var wire 32 % CPUIn [31:0] $end
$var wire 1 $ Reset $end
$var wire 32 & SrcA [31:0] $end
$var wire 32 ' WD3 [31:0] $end
$var wire 1 ( Zero $end
$var wire 32 ) SrcB [31:0] $end
$var wire 2 * ResultSrc [1:0] $end
$var wire 1 + RegWrite $end
$var wire 32 , RD2 [31:0] $end
$var wire 32 - RD1 [31:0] $end
$var wire 32 . RD [31:0] $end
$var wire 32 / PCTarget [31:0] $end
$var wire 2 0 PCSrc [1:0] $end
$var wire 32 1 PCPlus4 [31:0] $end
$var wire 32 2 PC [31:0] $end
$var wire 1 3 Negative $end
$var wire 1 4 MemWrite $end
$var wire 32 5 Instr [31:0] $end
$var wire 3 6 ImmSrc [2:0] $end
$var wire 32 7 ImmExt [31:0] $end
$var wire 32 8 CPUOut [31:0] $end
$var wire 1 9 ALUSrc $end
$var wire 32 : ALUResult [31:0] $end
$var wire 5 ; ALUControl [4:0] $end
$var wire 5 < A3 [4:0] $end
$var wire 5 = A2 [4:0] $end
$var wire 5 > A1 [4:0] $end
$var reg 32 ? Result [31:0] $end
$scope module alu_unit $end
$var wire 32 @ SrcA [31:0] $end
$var wire 32 A SrcB [31:0] $end
$var wire 5 B ALUControl [4:0] $end
$var reg 32 C ALUResult [31:0] $end
$var reg 1 3 Negative $end
$var reg 1 ( Zero $end
$upscope $end
$scope module control_unit_inst $end
$var wire 1 9 ALUSrc $end
$var wire 1 3 Negative $end
$var wire 1 + RegWrite $end
$var wire 1 ( Zero $end
$var wire 7 D opcode [6:0] $end
$var wire 7 E funct7 [6:0] $end
$var wire 3 F funct3 [2:0] $end
$var wire 1 4 MemWrite $end
$var wire 32 G Instr [31:0] $end
$var reg 5 H ALUControl [4:0] $end
$var reg 3 I ImmSrc [2:0] $end
$var reg 2 J PCSrc [1:0] $end
$var reg 2 K ResultSrc [1:0] $end
$upscope $end
$scope module data_mem $end
$var wire 32 L A [31:0] $end
$var wire 1 " CLK $end
$var wire 32 M CPUIn [31:0] $end
$var wire 1 4 WE $end
$var wire 32 N WD [31:0] $end
$var wire 1 O RDsel $end
$var wire 32 P RD [31:0] $end
$var reg 32 Q CPUOut [31:0] $end
$var reg 1 R WEM $end
$var reg 1 S WEOut $end
$upscope $end
$scope module extend_inst $end
$var wire 3 T ImmSrc [2:0] $end
$var wire 32 U Instr [31:0] $end
$var reg 32 V ImmExt [31:0] $end
$upscope $end
$scope module instruction_memory_inst $end
$var wire 32 W Instr [31:0] $end
$var wire 32 X PC_divided_by_4 [31:0] $end
$var wire 32 Y PC [31:0] $end
$upscope $end
$scope module program_counter_inst $end
$var wire 32 Z ALUResult [31:0] $end
$var wire 1 " CLK $end
$var wire 2 [ PCSrc [1:0] $end
$var wire 32 \ PCTarget [31:0] $end
$var wire 1 $ Reset $end
$var wire 32 ] PCPlus4 [31:0] $end
$var reg 32 ^ PC [31:0] $end
$upscope $end
$scope module reg_file_inst $end
$var wire 5 _ A1 [4:0] $end
$var wire 5 ` A2 [4:0] $end
$var wire 5 a A3 [4:0] $end
$var wire 1 " CLK $end
$var wire 32 b WD3 [31:0] $end
$var wire 1 + WE3 $end
$var wire 32 c RD2 [31:0] $end
$var wire 32 d RD1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 d
bx c
b110010 b
b1 a
b10010 `
b0 _
b0 ^
b100 ]
b110010 \
b0 [
b110010 Z
b0 Y
b0 X
b11001000000000000010010011 W
b110010 V
b11001000000000000010010011 U
b0 T
0S
0R
bx Q
bx P
0O
bx N
b0 M
b110010 L
b1 K
b0 J
b0 I
b110 H
b11001000000000000010010011 G
b0 F
b1 E
b10011 D
b110010 C
b110 B
b110010 A
b0 @
b110010 ?
b0 >
b10010 =
b1 <
b110 ;
b110010 :
19
bx 8
b110010 7
b0 6
b11001000000000000010010011 5
04
03
b0 2
b100 1
b0 0
b110010 /
bx .
b0 -
bx ,
1+
b1 *
b110010 )
0(
b110010 '
b0 &
b0 %
1$
b0 #
0"
bx !
$end
#10000
1"
#20000
0"
0$
#30000
09
b10000000000000000000000000000000 '
b10000000000000000000000000000000 b
b10000000000000000000000000000000 ?
1(
b0 :
b0 C
b0 L
b0 Z
b0 ,
b0 N
b0 c
b0 )
b0 A
b11 6
b11 I
b11 T
b0 *
b0 K
b0 ;
b0 B
b0 H
b1000000 E
b110111 D
b1010 <
b1010 a
b0 =
b0 `
b10000000000000000000000000000000 7
b10000000000000000000000000000000 V
b1000 1
b1000 ]
b10000000000000000000010100110111 5
b10000000000000000000010100110111 G
b10000000000000000000010100110111 U
b10000000000000000000010100110111 W
b1 X
b10000000000000000000000000000100 /
b10000000000000000000000000000100 \
b100 2
b100 Y
b100 ^
1"
#40000
0"
#50000
b0 .
b0 P
1O
19
b11111111111111111111111111111100 )
b11111111111111111111111111111100 A
03
0(
b1111111111111111111111111111100 :
b1111111111111111111111111111100 C
b1111111111111111111111111111100 L
b1111111111111111111111111111100 Z
1+
bx ,
bx N
bx c
b10000000000000000000000000000000 &
b10000000000000000000000000000000 @
b10000000000000000000000000000000 -
b10000000000000000000000000000000 d
b0 6
b0 I
b0 T
b10 *
b10 K
b110 ;
b110 B
b110 H
b0 '
b0 b
b0 ?
b1111111 E
b10 F
b11 D
b10 <
b10 a
b11100 =
b11100 `
b1010 >
b1010 _
b11111111111111111111111111111100 7
b11111111111111111111111111111100 V
b1100 1
b1100 ]
b11111111110001010010000100000011 5
b11111111110001010010000100000011 G
b11111111110001010010000100000011 U
b11111111110001010010000100000011 W
b10 X
b100 /
b100 \
b1000 2
b1000 Y
b1000 ^
1"
#60000
0"
#70000
bx .
bx P
1+
0O
09
b110010 '
b110010 b
b110010 ?
03
b110010 :
b110010 C
b110010 L
b110010 Z
b0 ,
b0 N
b0 c
b110010 &
b110010 @
b110010 -
b110010 d
b0 )
b0 A
b1 *
b1 K
b1010 ;
b1010 B
b1010 H
b100000 E
b0 F
b110011 D
b11 <
b11 a
b10 =
b10 `
b1 >
b1 _
b10000000010 7
b10000000010 V
b10000 1
b10000 ]
b1000000001000001000000110110011 5
b1000000001000001000000110110011 G
b1000000001000001000000110110011 U
b1000000001000001000000110110011 W
b11 X
b10000001110 /
b10000001110 \
b1100 2
b1100 Y
b1100 ^
1"
#80000
0"
#90000
b0 .
b0 P
1O
1S
0+
19
b11111111111111111111111111111100 )
b11111111111111111111111111111100 A
b11111111111111111111111111111100 '
b11111111111111111111111111111100 b
b11111111111111111111111111111100 ?
03
b1111111111111111111111111111100 :
b1111111111111111111111111111100 C
b1111111111111111111111111111100 L
b1111111111111111111111111111100 Z
b110010 ,
b110010 N
b110010 c
b10000000000000000000000000000000 &
b10000000000000000000000000000000 @
b10000000000000000000000000000000 -
b10000000000000000000000000000000 d
b1 6
b1 I
b1 T
b0 *
b0 K
b110 ;
b110 B
b110 H
0R
b1111111 E
b10 F
14
b100011 D
b11100 <
b11100 a
b11 =
b11 `
b1010 >
b1010 _
b11111111111111111111111111111100 7
b11111111111111111111111111111100 V
b10100 1
b10100 ]
b11111110001101010010111000100011 5
b11111110001101010010111000100011 G
b11111110001101010010111000100011 U
b11111110001101010010111000100011 W
b100 X
b1100 /
b1100 \
b10000 2
b10000 Y
b10000 ^
1"
#100000
0"
#110000
bx .
bx P
0O
b1 0
b1 J
b1 [
09
1(
b0 :
b0 C
b0 L
b0 Z
b0 ,
b0 N
b0 c
b0 &
b0 @
b0 -
b0 d
b0 )
b0 A
b10 6
b10 I
b10 T
b1010 ;
b1010 B
b1010 H
0S
b0 '
b0 b
b0 ?
b0 E
b0 F
04
b1100011 D
b0 <
b0 a
b0 =
b0 `
b0 >
b0 _
b0 7
b0 V
b110010 !
b110010 8
b110010 Q
b11000 1
b11000 ]
b1100011 5
b1100011 G
b1100011 U
b1100011 W
b101 X
b10100 /
b10100 \
b10100 2
b10100 Y
b10100 ^
1"
#120000
0"
#130000
1"
#140000
0"
#150000
1"
#160000
0"
#170000
1"
#180000
0"
#190000
1"
#200000
0"
#210000
1"
#220000
0"
#230000
1"
#240000
0"
#250000
1"
#260000
0"
#270000
1"
#280000
0"
#290000
1"
#300000
0"
#310000
1"
#320000
0"
#330000
1"
#340000
0"
#350000
1"
#360000
0"
#370000
1"
#380000
0"
#390000
1"
#400000
0"
#410000
1"
#420000
0"
#430000
1"
#440000
0"
#450000
1"
#460000
0"
#470000
1"
#480000
0"
#490000
1"
#500000
0"
#510000
1"
#520000
0"
#530000
1"
#540000
0"
#550000
1"
#560000
0"
#570000
1"
#580000
0"
#590000
1"
#600000
0"
#610000
1"
#620000
0"
#630000
1"
#640000
0"
#650000
1"
#660000
0"
#670000
1"
#680000
0"
#690000
1"
#700000
0"
#710000
1"
#720000
0"
#730000
1"
#740000
0"
#750000
1"
#760000
0"
#770000
1"
#780000
0"
#790000
1"
#800000
0"
#810000
1"
#820000
0"
#830000
1"
#840000
0"
#850000
1"
#860000
0"
#870000
1"
#880000
0"
#890000
1"
#900000
0"
#910000
1"
#920000
0"
#930000
1"
#940000
0"
#950000
1"
#960000
0"
#970000
1"
#980000
0"
#990000
1"
#1000000
0"
#1010000
1"
#1020000
0"
